// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	weather "weather/pkg/weather"
)

// WeatherProvider is an autogenerated mock type for the WeatherProvider type
type WeatherProvider struct {
	mock.Mock
}

// Get provides a mock function with given fields: cityName
func (_m *WeatherProvider) Get(cityName string) (*weather.WeatherData, error) {
	ret := _m.Called(cityName)

	var r0 *weather.WeatherData
	if rf, ok := ret.Get(0).(func(string) *weather.WeatherData); ok {
		r0 = rf(cityName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weather.WeatherData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cityName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeatherProvider creates a new instance of WeatherProvider. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewWeatherProvider(t testing.TB) *WeatherProvider {
	mock := &WeatherProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
